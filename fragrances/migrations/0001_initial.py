# Generated by Django 3.1.3 on 2020-12-05 01:21

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ApplicationModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='CollectionModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='FirstFamilyModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_family', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='MarketTypeModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('market_type', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='NaturalExtractsModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('natural_extracts', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='NotaCuerpoModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nota_cuerpo', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='NotaFondoModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nota_fondo', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='NotaSalidaModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nota_salida', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='SecondFamilyModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('second_family', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='TechnologyModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('technology', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='ThirdFamilyModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('third_family', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='FragrancesModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fragrance_code', models.CharField(max_length=20)),
                ('essential_club', models.BooleanField()),
                ('vigente', models.BooleanField()),
                ('commercial_name', models.CharField(max_length=20)),
                ('box', models.IntegerField()),
                ('cost_kilo_us', models.FloatField()),
                ('selling_price_aud', models.FloatField()),
                ('expiry_date', models.DateField()),
                ('sample_size', models.FloatField()),
                ('shortlisted', models.BooleanField()),
                ('won_selling', models.BooleanField()),
                ('allergen', models.FloatField()),
                ('natural_percentage', models.BooleanField()),
                ('natural_derived', models.BooleanField()),
                ('ecocert', models.BooleanField()),
                ('bio_degradable', models.BooleanField()),
                ('dangerous_good', models.BooleanField()),
                ('ai', models.BooleanField()),
                ('application', models.ManyToManyField(to='fragrances.ApplicationModel')),
                ('collection_prom', models.ManyToManyField(to='fragrances.CollectionModel')),
                ('first_family', models.ManyToManyField(to='fragrances.FirstFamilyModel')),
                ('market_type', models.ManyToManyField(to='fragrances.MarketTypeModel')),
                ('natural_extracts', models.ManyToManyField(to='fragrances.NaturalExtractsModel')),
                ('nota_cuerpo', models.ManyToManyField(to='fragrances.NotaCuerpoModel')),
                ('nota_fondo', models.ManyToManyField(to='fragrances.NotaFondoModel')),
                ('nota_salida', models.ManyToManyField(to='fragrances.NotaSalidaModel')),
                ('second_family', models.ManyToManyField(to='fragrances.SecondFamilyModel')),
                ('technology', models.ManyToManyField(to='fragrances.TechnologyModel')),
                ('third_family', models.ManyToManyField(to='fragrances.ThirdFamilyModel')),
            ],
        ),
        migrations.CreateModel(
            name='CommentsModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('fragrance', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='fragrances.fragrancesmodel')),
            ],
        ),
    ]
